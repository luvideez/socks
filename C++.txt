#define UNICODE
#define _UNICODE

#include <iostream>
#include <windows.h>
#include <windowsx.h> // For SetWindowSubclass, DefSubclassProc
#include <commdlg.h>
#include <fstream>
#include <string>
#include <sstream>
#include <ctime>
#include <iomanip>
#include <thread>
#include <chrono>
#include <TlHelp32.h>
#include <Wininet.h>
#include <algorithm>
#include <gdiplus.h>
#include <Shellapi.h> // Required for ShellExecuteW
#include "resource.h" // Required for resource definitions (IDI_ICON1)
#pragma comment (lib,"Gdiplus.lib")

using namespace Gdiplus;

// Định nghĩa các ID cho menu và controls
#define IDM_SETTING_FILE 1001
#define IDM_SETTING_EXIT 1002
#define IDM_ABOUT 1003
#define IDB_VPN_ON 2001
#define IDB_VPN_OFF 2002
#define IDM_THEME_LIGHT 3001
#define IDM_THEME_DARK 3002

// Các biến toàn cục
HINSTANCE hInst;
HWND hMainWnd;
HWND hTimeLabel;
HWND hVPNOnButton, hVPNOffButton;
std::time_t startTime = 0;
bool vpnEnabled = false;
std::thread timerThread;
HFONT hFont;
std::wstring bvSshStatus;
bool isDarkMode = false; // Track the theme
bool buttonPressed = false; // Track the button state

// Các đường dẫn (sử dụng wstring)
const std::wstring bitvisePath = L"C:\\Program Files (x86)\\Bitvise SSH Client\\BvSsh.exe";
const std::wstring tlpFilePath = L"C:\\Users\\Luvideez\\Desktop\\ditucogivui.tlp";
const std::wstring socksIP = L"127.0.0.1:9999";

// Forward declarations (sử dụng wchar_t*)
bool IsProcessRunning(const wchar_t* processName);
void RunProcess(const std::wstring& filePath);
void EnableSocksProxy(const std::wstring& proxyAddress);
void DisableSocksProxy();
void KillProcess(const wchar_t* processName);
void UpdateTimerLabel();
void UpdateBvSshStatus();

// Hàm cửa sổ chính
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);

// Hàm xử lý menu About
void ShowAboutDialog(HWND hWnd);

// Hàm chọn file .tlp
void ChooseTlpFile();

// Hàm cập nhật label thời gian
void UpdateTimerLabel();

// Hàm bật VPN
void EnableVPN();

// Hàm tắt VPN
void DisableVPN();

// Hàm kiểm tra tiến trình đang chạy
bool IsProcessRunning(const wchar_t* processName) {
    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (hSnapshot == INVALID_HANDLE_VALUE) {
        // Xử lý lỗi nếu không thể tạo snapshot
        MessageBoxW(NULL, L"Không thể tạo snapshot tiến trình.", L"Lỗi", MB_OK | MB_ICONERROR);
        return false;
    }

    PROCESSENTRY32W pe32;
    pe32.dwSize = sizeof(PROCESSENTRY32W);

    if (!Process32FirstW(hSnapshot, &pe32)) {
        // Xử lý lỗi nếu không thể lấy tiến trình đầu tiên
        MessageBoxW(NULL, L"Không thể lấy tiến trình đầu tiên.", L"Lỗi", MB_OK | MB_ICONERROR);
        CloseHandle(hSnapshot);
        return false;
    }

    do {
        if (_wcsicmp(pe32.szExeFile, processName) == 0) {
            // Tìm thấy tiến trình
            CloseHandle(hSnapshot);
            return true;
        }
    } while (Process32NextW(hSnapshot, &pe32));

    // Không tìm thấy tiến trình
    CloseHandle(hSnapshot);
    return false;
}

// Hàm chạy một tiến trình
void RunProcess(const std::wstring& filePath) {
    HINSTANCE hInst = ShellExecuteW(NULL, L"open", filePath.c_str(), NULL, NULL, SW_SHOWNORMAL);

    if ((INT_PTR)hInst <= 32) {
        // Xử lý lỗi nếu ShellExecuteW thất bại
        DWORD error = GetLastError();
        std::wstringstream ss;
        ss << L"Không thể mở file. Mã lỗi: " << error;
        MessageBoxW(NULL, ss.str().c_str(), L"Lỗi", MB_OK | MB_ICONERROR);
    }
}

// Hàm bật socks proxy (cần quyền admin)
void EnableSocksProxy(const std::wstring& proxyAddress) {
    HKEY hKey;
    if (RegOpenKeyExW(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings", 0, KEY_ALL_ACCESS, &hKey) == ERROR_SUCCESS) {
        DWORD proxyEnable = 1;
        DWORD proxyOverride = 1; // Bypass proxy for local addresses
        RegSetValueExW(hKey, L"ProxyEnable", 0, REG_DWORD, (BYTE*)&proxyEnable, sizeof(proxyEnable));
        RegSetValueExW(hKey, L"ProxyServer", 0, REG_SZ, (BYTE*)proxyAddress.c_str(), ((DWORD)proxyAddress.length() + 1) * sizeof(wchar_t)); // Multiply by sizeof(wchar_t) - Cast to DWORD
        RegSetValueExW(hKey, L"ProxyOverride", 0, REG_SZ, (BYTE*)L"<local>", 8 * sizeof(wchar_t));  // Bypass for local

        RegCloseKey(hKey);

        // Notify system of change
        InternetSetOptionW(NULL, INTERNET_OPTION_SETTINGS_CHANGED, NULL, 0);
        InternetSetOptionW(NULL, INTERNET_OPTION_REFRESH, NULL, 0);
    }
    else {
        MessageBoxW(NULL, L"Không thể bật Socks proxy. Vui lòng chạy với quyền Administrator.", L"Lỗi", MB_OK | MB_ICONERROR);
    }
}

// Hàm tắt socks proxy (cần quyền admin)
void DisableSocksProxy() {
    HKEY hKey;
    if (RegOpenKeyExW(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings", 0, KEY_ALL_ACCESS, &hKey) == ERROR_SUCCESS) {
        DWORD proxyEnable = 0;
        RegSetValueExW(hKey, L"ProxyEnable", 0, REG_DWORD, (BYTE*)&proxyEnable, sizeof(proxyEnable));
        RegDeleteValueW(hKey, L"ProxyServer");

        RegCloseKey(hKey);

        // Notify system of change
        InternetSetOptionW(NULL, INTERNET_OPTION_SETTINGS_CHANGED, NULL, 0);
        InternetSetOptionW(NULL, INTERNET_OPTION_REFRESH, NULL, 0);

    }
    else {
        MessageBoxW(NULL, L"Không thể tắt Socks proxy. Vui lòng chạy với quyền Administrator.", L"Lỗi", MB_OK | MB_ICONERROR);
    }
}

// Hàm tắt một tiến trình
void KillProcess(const wchar_t* processName) {
    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (hSnapshot == INVALID_HANDLE_VALUE) {
        // Xử lý lỗi nếu không thể tạo snapshot
        MessageBoxW(NULL, L"Không thể tạo snapshot tiến trình.", L"Lỗi", MB_OK | MB_ICONERROR);
        return;
    }

    PROCESSENTRY32W pe32;
    pe32.dwSize = sizeof(PROCESSENTRY32W);

    if (!Process32FirstW(hSnapshot, &pe32)) {
        // Xử lý lỗi nếu không thể lấy tiến trình đầu tiên
        MessageBoxW(NULL, L"Không thể lấy tiến trình đầu tiên.", L"Lỗi", MB_OK | MB_ICONERROR);
        CloseHandle(hSnapshot);
        return;
    }

    do {
        if (_wcsicmp(pe32.szExeFile, processName) == 0) {
            HANDLE hProcess = OpenProcess(PROCESS_TERMINATE, FALSE, pe32.th32ProcessID);
            if (hProcess) {
                TerminateProcess(hProcess, 0);
                CloseHandle(hProcess);
            }
            else {
                // Xử lý lỗi nếu không thể mở tiến trình
                MessageBoxW(NULL, L"Không thể mở tiến trình để tắt.", L"Lỗi", MB_OK | MB_ICONERROR);
            }
        }
    } while (Process32NextW(hSnapshot, &pe32));

    CloseHandle(hSnapshot);
}

// Hàm cập nhật label thời gian (chạy trong một thread riêng)
void UpdateTimerLabel() {
    while (vpnEnabled) {
        std::time_t currentTime = std::time(nullptr);
        std::time_t elapsedSeconds = currentTime - startTime;

        int hours = (int)(elapsedSeconds / 3600);
        int minutes = (int)((elapsedSeconds % 3600) / 60);
        int seconds = (int)(elapsedSeconds % 60);

        std::wstringstream ss;
        ss << L"Hoạt động: " << std::setw(2) << std::setfill(L'0') << hours << L":"
            << std::setw(2) << std::setfill(L'0') << minutes << L":"
            << std::setw(2) << std::setfill(L'0') << seconds;

        std::wstring timeString = ss.str();
        SetWindowTextW(hTimeLabel, timeString.c_str());

        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}

// Hàm cập nhật trạng thái BvSsh
void UpdateBvSshStatus() {
    if (IsProcessRunning(L"BvSsh.exe")) {
        bvSshStatus = L"Bitvise SSH Client: Đang chạy";
    }
    else {
        bvSshStatus = L"Bitvise SSH Client: Đang tắt";
    }
}

// Hàm bật VPN
void EnableVPN() {
    if (IsProcessRunning(L"BvSsh.exe")) {
        MessageBoxW(NULL, L"Bitvise SSH Client đã chạy.", L"Thông báo", MB_OK | MB_ICONINFORMATION);
    }
    else {
        // Chạy Bitvise SSH Client
        RunProcess(tlpFilePath);

        // Đợi 2 giây để Bitvise khởi động
        std::this_thread::sleep_for(std::chrono::seconds(2));

        // Bật Socks proxy
        EnableSocksProxy(socksIP);

        //MessageBoxW(NULL, L"VPN Enabled", L"Info", MB_OK | MB_ICONINFORMATION); // Removed message
    }

    vpnEnabled = true;
    startTime = std::time(nullptr);
    timerThread = std::thread(UpdateTimerLabel);
    timerThread.detach();
    UpdateBvSshStatus();
    InvalidateRect(hMainWnd, NULL, TRUE); // Force redraw to update status
}

// Hàm tắt VPN
void DisableVPN() {
    // Tắt Socks proxy
    DisableSocksProxy();

    // Tắt Bitvise SSH Client
    KillProcess(L"BvSsh.exe");

    // Đợi 2 giây
    std::this_thread::sleep_for(std::chrono::seconds(2));

    // Tắt chương trình (tự tắt)
    PostQuitMessage(0);
    vpnEnabled = false;
    UpdateBvSshStatus();
    InvalidateRect(hMainWnd, NULL, TRUE); // Force redraw to update status
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    hInst = hInstance;

    // Initialize GDI+
    GdiplusStartupInput gdiplusStartupInput;
    ULONG_PTR gdiplusToken;
    GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);

    // Đăng ký lớp cửa sổ
    WNDCLASSEXW wcex;
    wcex.cbSize = sizeof(WNDCLASSEXW);
    wcex.style = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc = WndProc;
    wcex.cbClsExtra = 0;
    wcex.cbWndExtra = 0;
    wcex.hInstance = hInstance;
    wcex.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_ICON1)); // Set the icon
    wcex.hCursor = LoadCursor(NULL, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wcex.lpszMenuName = NULL;
    wcex.lpszClassName = L"SocksVPNClass";
    wcex.hIconSm = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_ICON1)); // Set the small icon

    if (!RegisterClassExW(&wcex)) {
        MessageBoxW(NULL, L"Call to RegisterClassEx failed!", L"Windows Desktop Guided Tour", NULL);
        return 1;
    }

    // Tạo cửa sổ
    hMainWnd = CreateWindowW(L"SocksVPNClass", L"Socks VPN", WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, 400, 450, NULL, NULL, hInstance, NULL); // Reduced height by 30px

    if (!hMainWnd) {
        MessageBoxW(NULL, L"Call to CreateWindow failed!", L"Windows Desktop Guided Tour", NULL);
        return 1;
    }

    // Tạo menu
    HMENU hMenu = CreateMenu();
    HMENU hSettingMenu = CreateMenu();

    AppendMenuW(hSettingMenu, MF_STRING, IDM_THEME_LIGHT, L"Giao diện sáng");
    AppendMenuW(hSettingMenu, MF_STRING, IDM_THEME_DARK, L"Giao diện tối");
    AppendMenuW(hSettingMenu, MF_STRING, IDM_SETTING_FILE, L"Chọn file .tlp");
    AppendMenuW(hSettingMenu, MF_STRING, IDM_SETTING_EXIT, L"Thoát");

    AppendMenuW(hMenu, MF_POPUP, (UINT_PTR)hSettingMenu, L"Cài đặt"); // Vietnamese
    AppendMenuW(hMenu, MF_STRING, IDM_ABOUT, L"Thông tin"); // Vietnamese

    SetMenu(hMainWnd, hMenu);

    // Tạo font Arial 20 đậm
    hFont = CreateFontW(20, 0, 0, 0, FW_BOLD, FALSE, FALSE, FALSE, DEFAULT_CHARSET,
        OUT_OUTLINE_PRECIS, CLIP_DEFAULT_PRECIS, CLEARTYPE_QUALITY, FF_DONTCARE, L"Arial");

    // Tạo các controls
    hTimeLabel = CreateWindowW(L"STATIC", L"Hoạt động: 00:00:00", WS_CHILD | WS_VISIBLE | SS_CENTER,
        50, 200, 300, 20, hMainWnd, NULL, hInstance, NULL);
    SendMessage(hTimeLabel, WM_SETFONT, (WPARAM)hFont, TRUE);

    hVPNOnButton = CreateWindowW(L"BUTTON", L"Bật VPN", WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON | BS_OWNERDRAW,
        50, 270, 100, 30, hMainWnd, (HMENU)IDB_VPN_ON, hInstance, NULL); //10px down
    SendMessage(hVPNOnButton, WM_SETFONT, (WPARAM)hFont, TRUE);

    hVPNOffButton = CreateWindowW(L"BUTTON", L"Tắt VPN", WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON | BS_OWNERDRAW,
        250, 270, 100, 30, hMainWnd, (HMENU)IDB_VPN_OFF, hInstance, NULL);//10px down
    SendMessage(hVPNOffButton, WM_SETFONT, (WPARAM)hFont, TRUE);
    // Make sure to set the Ownerdraw style for the Buttons! BS_OWNERDRAW style

    // Initial BvSsh status update
    UpdateBvSshStatus();

    // Hiển thị cửa sổ
    ShowWindow(hMainWnd, nCmdShow);
    UpdateWindow(hMainWnd);

    // Vòng lặp thông điệp
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    DeleteObject(hFont);
    GdiplusShutdown(gdiplusToken);

    return (int)msg.wParam;
}

// Hàm xử lý thông điệp cửa sổ
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {
    HDC hdc;
    PAINTSTRUCT ps;
    RECT rect = { 0 }; // Initialize rect here
    HBRUSH hBrush;
    COLORREF textColor = RGB(0, 0, 0);  // Default text color (black)
    COLORREF bgColor = RGB(173, 216, 230);  // Default background color (light blue)

    if (isDarkMode) {
        textColor = RGB(255, 255, 255); // White
        bgColor = RGB(0, 0, 0);   // Black
    }
    switch (message) {
    case WM_LBUTTONDOWN:
    {
        // Kiểm tra xem chuột có nằm trên button không
        POINT pt;
        pt.x = LOWORD(lParam);
        pt.y = HIWORD(lParam);

        GetClientRect(hVPNOnButton, &rect); // Initialize rect for hit testing
        if (PtInRect(&rect, pt))
        {
            buttonPressed = true;
            InvalidateRect(hWnd, &rect, FALSE);
        }
        GetClientRect(hVPNOffButton, &rect); // Re-init for other Button
        if (PtInRect(&rect, pt))
        {
            buttonPressed = true;
            InvalidateRect(hWnd, &rect, FALSE);
        }
        break;
    }

    case WM_LBUTTONUP:
    {
        buttonPressed = false;
        InvalidateRect(hWnd, &rect, FALSE);
        break;
    }
    case WM_COMMAND:
        switch (LOWORD(wParam)) {
        case IDM_SETTING_FILE:
            ChooseTlpFile();
            break;
        case IDM_SETTING_EXIT:
            DestroyWindow(hWnd);
            break;
        case IDM_ABOUT:
            ShowAboutDialog(hWnd);
            break;
        case IDB_VPN_ON:
            EnableVPN();
            break;
        case IDB_VPN_OFF:
            DisableVPN();
            break;
            // Theme selection
        case IDM_THEME_LIGHT:
            isDarkMode = false;
            InvalidateRect(hWnd, NULL, TRUE); // Redraw the window
            break;
        case IDM_THEME_DARK:
            isDarkMode = true;
            InvalidateRect(hWnd, NULL, TRUE); // Redraw the window
            break;
        }
        break;
    case WM_CTLCOLORSTATIC:
    {
        HDC hdcStatic = (HDC)wParam;
        SetTextColor(hdcStatic, textColor); // Use theme text color
        SetBkColor(hdcStatic, bgColor); // Use theme background color
        return (INT_PTR)CreateSolidBrush(bgColor); // Use theme background color
    }
    case WM_DRAWITEM: {
        LPDRAWITEMSTRUCT pDIS = (LPDRAWITEMSTRUCT)lParam;
        if (pDIS->CtlID == IDB_VPN_ON || pDIS->CtlID == IDB_VPN_OFF) {
            // Define colors for 3D effect and button press state
            COLORREF lightColor = RGB(102, 255, 102); // Lighter green
            COLORREF darkColor = RGB(0, 51, 0);   // Darker green
            COLORREF fillColor = RGB(0, 100, 0);  // Base green color
            if (buttonPressed && pDIS->itemState & ODS_SELECTED) {
                fillColor = darkColor; // Darken button color
            }

            // Draw Background
            HBRUSH hBrush = CreateSolidBrush(fillColor);
            FillRect(pDIS->hDC, &pDIS->rcItem, hBrush);
            DeleteObject(hBrush);

            // Draw the borders
            HPEN hPen, hOldPen;
            if (buttonPressed && pDIS->itemState & ODS_SELECTED)
                hPen = CreatePen(PS_SOLID, 1, lightColor);
            else
                hPen = CreatePen(PS_SOLID, 1, darkColor);
            hOldPen = (HPEN)SelectObject(pDIS->hDC, hPen);

            HBRUSH hbrOld = (HBRUSH)SelectObject(pDIS->hDC, GetStockObject(NULL_BRUSH));
            Rectangle(pDIS->hDC, pDIS->rcItem.left, pDIS->rcItem.top, pDIS->rcItem.right - 1, pDIS->rcItem.bottom - 1);
            SelectObject(pDIS->hDC, hOldPen);
            SelectObject(pDIS->hDC, hbrOld);

            DeleteObject(hPen);

            SetBkMode(pDIS->hDC, TRANSPARENT);
            SetTextColor(pDIS->hDC, RGB(255, 255, 255)); // White text
            SelectObject(pDIS->hDC, hFont); // Use global font

            // Get the button text
            int len = GetWindowTextLengthW(pDIS->hwndItem);
            wchar_t* buffer = new wchar_t[len + 1];
            GetWindowTextW(pDIS->hwndItem, buffer, len + 1);

            DrawTextW(pDIS->hDC, buffer, -1, &pDIS->rcItem, DT_CENTER | DT_VCENTER | DT_SINGLELINE);
            delete[] buffer;
            return TRUE;
        }
        break;
    }
    case WM_PAINT:
    {
        hdc = BeginPaint(hWnd, &ps);
        GetClientRect(hWnd, &rect);

        // Background
        hBrush = CreateSolidBrush(bgColor); // Use theme background color
        FillRect(hdc, &rect, hBrush);
        DeleteObject(hBrush);

        // Font and Text
        SetBkMode(hdc, TRANSPARENT);
        SetTextColor(hdc, textColor); // Use theme text color
        SelectObject(hdc, hFont);

        // First Line with Top Margin
        rect.top = 50;
        DrawTextW(hdc, L"Phần mềm Socks - VPN", -1, &rect, DT_CENTER | DT_TOP | DT_SINGLELINE);
        rect.top += 25;
        DrawTextW(hdc, L"Domain: ditucogivui.com", -1, &rect, DT_CENTER | DT_TOP | DT_SINGLELINE);
        rect.top += 25;
        DrawTextW(hdc, L"IP: 103.82.24.7", -1, &rect, DT_CENTER | DT_TOP | DT_SINGLELINE);
        rect.top += 25;
        DrawTextW(hdc, L"Email: luvideez@outlook.com", -1, &rect, DT_CENTER | DT_TOP | DT_SINGLELINE);
        rect.top += 25;
        DrawTextW(hdc, L"Mobile: 0987575432", -1, &rect, DT_CENTER | DT_TOP | DT_SINGLELINE);
        rect.top += 25;
        DrawTextW(hdc, bvSshStatus.c_str(), -1, &rect, DT_CENTER | DT_TOP | DT_SINGLELINE);

        EndPaint(hWnd, &ps);
        break;
    }
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// Hàm hiển thị dialog About
void ShowAboutDialog(HWND hWnd) {
    MessageBoxW(hWnd, L"Socks by Luvideez\nServer: ditucogivui.com", L"Thông tin", MB_OK | MB_ICONINFORMATION);
}

// Hàm chọn file .tlp
void ChooseTlpFile() {
    OPENFILENAMEW ofn;
    wchar_t szFile[260];

    ZeroMemory(&ofn, sizeof(ofn));
    ofn.lStructSize = sizeof(ofn);
    ofn.hwndOwner = hMainWnd;
    ofn.lpstrFile = szFile;
    ofn.lpstrFile[0] = L'\0';
    ofn.nMaxFile = sizeof(szFile) / sizeof(wchar_t);
    ofn.lpstrFilter = L"TLP Files (*.tlp)\0*.tlp\0All Files (*.*)\0*.*\0";
    ofn.nFilterIndex = 1;
    ofn.lpstrTitle = L"Chọn file .tlp"; // Vietnamese
    ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;

    if (GetOpenFileNameW(&ofn) == TRUE) {
        MessageBoxW(hMainWnd, L"Đã chọn file. Bạn có thể muốn lưu nó.", L"Thông tin", MB_OK | MB_ICONINFORMATION);
    }
}
